# HTTP PORT:
# ---------------------
# By default, the embedded server is listening on port 8080. That is fine as long as you
# are working with only one application. If you run more Spring applications during
# development, which is usually the case with cloud native systems, you’ll want to specify a
# different port number for each application using the server.port property.
#
# CONNECTION TIMEOUT:
# --------------------
# The server.tomcat.connection-timeout property defines a limit for how much time Tomcat
# should wait between accepting a TCP connection from a client and actually receiving the
# HTTP request. It helps prevent denial-of-service (DoS) attacks where a connection is
# established, Tomcat reserves a thread to handle the request, and the request never comes.
# The same timeout is used to limit the time spent reading the HTTP request body when there
# is one.
#
# The default value is 20s (20 seconds), which is probably too much for a standard cloud native
# application. In the context of highly distributed systems in the cloud, we probably don’t
# want to wait more than a couple of seconds and risk a cascading failure due to a Tomcat
# instance hanging for too long. Something like 2s would be better. You can also use the
# server.tomcat.keep-alive-timeout property to configure how long to keep a connection open
# while waiting for new HTTP requests.
#
# THREAD POOL:
# ------------
#
# Tomcat has a pool of threads that process requests, following the thread-per request model.
# The number of available threads will determine how many requests can be handled
# simultaneously. You can configure the maximum number of request processing threads through
# the server.tomcat.threads.max property. You can also define the minimum number of threads
# that should always be kept running (server.tomcat .threads.min-spare), which is also how
# many threads are created at startup.
#
# Determining the best configuration for a thread pool is complicated, and there’s no magic
# formula for computing it. Resource analysis, monitoring, and many trials are usually
# necessary to find a suitable configuration. The default thread pool can grow up to 200
# threads and has 10 worker threads always running, which are good starting values in
# production. In your local environment, you might want to lower those values to optimize
# resource consumption, since it increases linearly with the number of threads.
server:
  port: 9001
  shutdown: graceful
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5

spring:
  application:
    name: catalog-service             # The name of the application, used by the config server to filter the configuration
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:"  # Imports configuration data from a config server when available
  cloud:
    config:
      uri: http://localhost:8888      # The URL of the configuration server
      request-connect-timeout: 5000   # 5s Timeout on waiting to connect to the config server (ms)
      request-read-timeout: 5000      # 5s Timeout on waiting to read configuration data from the config server (ms)
      fail-fast: false                # In production, set to true, Makes a failure to connect to the config server fatal
      retry:
        max-attempts: 6               # Maximum number of attempts
        initial-interval: 1000        # 1s, Initial retry interval for backoff (ms)
        max-interval: 2000            # 2s, Maximum retry interval for backoff (ms)
        multiplier: 1.1               # Multiplier to compute the next interval
  datasource:
    username: basit
    password: basit123
    url: jdbc:postgresql://localhost:5432/polardb_catalog
    hikari:
      connection-timeout: 2000  # The maximum time (ms) to spend waiting to get a connection from the pool
      maximum-pool-size: 5      # The maximum number of connections HikariCP will keep in the pool

management:
  endpoints:
    web:
      exposure:
        include: refresh              # Exposes the /actuator/refresh endpoint through HTTP

polar:
  greeting: Welcome to the local book catalog!
